// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../../app/data/models/expense_dao.dart';
import '../../../../app/data/models/tag_dao.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5919817927012936905),
      name: 'ExpenseDao',
      lastPropertyId: const obx_int.IdUid(5, 640440764480911258),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8467154191867697575),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 980807865786412414),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2192930994010682160),
            name: 'note',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5272017983793239894),
            name: 'time',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 24130832137686415),
            name: 'tags',
            targetId: const obx_int.IdUid(4, 3601738121799794424))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3601738121799794424),
      name: 'TagDao',
      lastPropertyId: const obx_int.IdUid(3, 6383428610470993746),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5518069033967568717),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7866011984642990259),
            name: 'tag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6383428610470993746),
            name: 'color',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 3158100299059240116),
      lastIndexId: const obx_int.IdUid(1, 1128386827182227114),
      lastRelationId: const obx_int.IdUid(4, 24130832137686415),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        3124102123521736051,
        507036025836838464,
        3158100299059240116
      ],
      retiredIndexUids: const [1128386827182227114],
      retiredPropertyUids: const [
        3879372550089706277,
        8381641229841950575,
        72597092580267512,
        849968182285221238,
        640440764480911258,
        2238330895478964221
      ],
      retiredRelationUids: const [3099708585342056500],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ExpenseDao: obx_int.EntityDefinition<ExpenseDao>(
        model: _entities[0],
        toOneRelations: (ExpenseDao object) => [],
        toManyRelations: (ExpenseDao object) =>
            {obx_int.RelInfo<ExpenseDao>.toMany(4, object.id): object.tags},
        getId: (ExpenseDao object) => object.id,
        setId: (ExpenseDao object, int id) {
          object.id = id;
        },
        objectToFB: (ExpenseDao object, fb.Builder fbb) {
          final noteOffset = fbb.writeString(object.note);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.value);
          fbb.addOffset(2, noteOffset);
          fbb.addInt64(3, object.time.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = ExpenseDao(
              value: valueParam, note: noteParam, time: timeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<ExpenseDao>(object.tags,
              store, obx_int.RelInfo<ExpenseDao>.toMany(4, object.id));
          return object;
        }),
    TagDao: obx_int.EntityDefinition<TagDao>(
        model: _entities[1],
        toOneRelations: (TagDao object) => [],
        toManyRelations: (TagDao object) => {},
        getId: (TagDao object) => object.id,
        setId: (TagDao object, int id) {
          object.id = id;
        },
        objectToFB: (TagDao object, fb.Builder fbb) {
          final tagOffset = fbb.writeString(object.tag);
          final colorOffset = fbb.writeString(object.color);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tagOffset);
          fbb.addOffset(2, colorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = TagDao(tag: tagParam, color: colorParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ExpenseDao] entity fields to define ObjectBox queries.
class ExpenseDao_ {
  /// see [ExpenseDao.id]
  static final id =
      obx.QueryIntegerProperty<ExpenseDao>(_entities[0].properties[0]);

  /// see [ExpenseDao.value]
  static final value =
      obx.QueryDoubleProperty<ExpenseDao>(_entities[0].properties[1]);

  /// see [ExpenseDao.note]
  static final note =
      obx.QueryStringProperty<ExpenseDao>(_entities[0].properties[2]);

  /// see [ExpenseDao.time]
  static final time =
      obx.QueryDateProperty<ExpenseDao>(_entities[0].properties[3]);

  /// see [ExpenseDao.tags]
  static final tags =
      obx.QueryRelationToMany<ExpenseDao, TagDao>(_entities[0].relations[0]);
}

/// [TagDao] entity fields to define ObjectBox queries.
class TagDao_ {
  /// see [TagDao.id]
  static final id =
      obx.QueryIntegerProperty<TagDao>(_entities[1].properties[0]);

  /// see [TagDao.tag]
  static final tag =
      obx.QueryStringProperty<TagDao>(_entities[1].properties[1]);

  /// see [TagDao.color]
  static final color =
      obx.QueryStringProperty<TagDao>(_entities[1].properties[2]);
}
